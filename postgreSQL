PostgreSQL bu relatsion va norelatsion(JSON) so'rovlarni qo'llab quvvatlaydigan 
bepul ochiq manbali ma'lumotlar bazasi
PostgreSQL bu dinamik veb saytlar va ilovalar uchun ma'lumotlar bazasi
PostgreSQL eng muhim dasturlash tillarini qo'llab quvvatlaydi
misol:
python
java
c++
node.JS
bor
ruby
PostgreSQL Kaliforniya universitetining Berkli kompyuter fanlari bo'limida ixtiro qilingan.
U bir nechta ma'lumotlar turlarini qo'llab-quvvatlash uchun zarur bo'lgan minimal xususiyatlarga ega ma'lumotlar bazasi tizimini yaratish maqsadida 1986 yilda loyiha sifatida boshlangan.


PostgreSQL da jadval yaratish:

CREATE TABLE car(
brand VARCHAR(255),
model VARCHAR(255),
year INT
)
Yuqoridagi kodlar quyidagicha tushuntiriladi
CREATE TABLE - ya'ni jadval yaratish kodi

car - bu jadval nomi

brand va model biz satr qiymatlarini kutmoqdamiz va satr qiymatlari VARCHAR kalit so'z bilan belgilanadi.
Shuningdek, biz satr maydonida ruxsat etilgan belgilar sonini ko'rsatishimiz kerak va biz aniq bilmaganimiz uchun uni 255 ga o'rnatdik ya'ni 255 harfdan iborat.

Barcha Natijalarni tekshirish uchun
SELECT * FROM cars;


INSERT INTO - PostgreSQL-da jadvalga ma'lumotlarni kiritish uchun biz ushbu bayonotdan foydalanamiz
INSERT INTO cars (brand, model, year)
VALUES ('Ford', 'Mustang', 1964);

VALUES - bu INSERT INTO ichiga kiritgan kalitlarimiz uchun qiymat yozamiz
Biz INSERT INTO ichiga bir nechta values larni joylashimiz mumkin
INSERT INTO cars (brand, model, year)
VALUES
  ('Volvo', 'p1800', 1968),
  ('BMW', 'M1', 1978),
  ('Toyota', 'Celica', 1975);

SELECT - Ma'lumotlar bazasidan ma'lumotlarni olish uchun foydalanamiz
SELECT brand, year FROM cars;
Yuqorida biz ma'lumotlar bazasidan cars ning brand va year sini chiqardik

ALTER TABLE - Mavjud jadvalga ustun qo'shish uchun foydalanamiz

ALTER TABLE - bayonot mavjud jadvalga ustunlarni qo'shish, o'chirish yoki o'zgartirish uchun ishlatiladi.

cars jadvalimizga color nomli ustun qo'shmoqchimiz
ALTER TABLE cars
ADD color VARCHAR(255);

UPDATE - bayonot jadvaldagi mavjud yozuvlardagi qiymat(lar)ni o'zgartirish uchun ishlatiladi.
UPDATE cars
SET color = 'red'
WHERE brand = 'Volvo';

Agar WHERE bayonotidan foydalanmasak u hamma yozuvlarni o'zgartirib yuboradi
UPDATE cars
SET color = 'red';

Bir nechta ustunlarni yangilash
UPDATE cars
SET color = 'white', year = 1970
WHERE brand = 'Toyota';

jadvaldagi year ustuninig ma'lumot turi INT ni VARCHAR(4) ga o'zgartiramiz
ALTER TABLE cars
ALTER COLUMN year TYPE VARCHAR(4);

Agar ustun qiymatga ega bo'lsa, ba'zi ma'lumotlar turlarini aylantirib bo'lmaydi. Masalan, raqamlar har doim matnga aylantirilishi mumkin, lekin matn har doim ham raqamlarga aylantirilmaydi.

jadvaldagi bir xil ma'lumotning ichidagi qiymatini o'zgartiramiz
ALTER TABLE cars
ALTER COLUMN color TYPE VARCHAR(30);
bunda VARCHAR(255) ni VARCHAR(30) ga o'zgartirdik

Jadval ichidagi ustunni olib tashlash uchun DROP COLUMN dan foydalanamiz
ALTER TABLE cars
DROP COLUMN color;
bunda biz cars jadvalidagi color ustunini olib tashladik

DELETE bayonoti jadvaldagi yozuvlarni o'chirib tashlashda foydaniladi
Ammo extiyot bo'lish kerak WHERE bandini o'tkazib yubormaslik kerak 
Agar WHERE bandi o'tkazib yuborilsa jadvaldagi barcha yozuvlar o'chib ketadi
DELETE FROM cars
WHERE brand = 'Volvo';

TRUNCATE TABLE - bu bayonot ham barcha ma'lumotlarni o'chirib tashlaydi
TRUNCATE TABLE cars;

DROP TABLE - bayonot mavjud jadvalni ma'lumotlar bazasidan o'chirib tashlaydi
DROP TABLE cars;

Biz bandda turli operatorlar WHERE bilan ishlashimiz mumkin:

=	ga teng
<	Dan kichik; .. dan kamroq
>	dan kattaroq
<=	dan kichik yoki teng
>=	dan katta yoki teng
<>	ga teng emas
!=	ga teng emas
LIKE	Qiymat naqshga mos kelishini tekshiring (katta-kichik harf sezgir)
ILIKE	Qiymat naqshga mos kelishini tekshiring (katta harflar sezilmaydi)
AND	Mantiqiy VA
OR	Mantiqiy OR
IN	Qiymat qiymatlar oralig'ida ekanligini tekshiring
BETWEEN	Qiymat qiymatlar oralig'ida ekanligini tekshiring
IS NULL	Qiymat NULL ekanligini tekshiring
NOT	Salbiy natija beradi, masalan NOT LIKE, NOT IN, NOT BETWEEN

MISOL:
Yil 1975 yildan kamroq bo'lgan barcha yozuvlarni qaytaring:
SELECT * FROM cars
WHERE year < 1975;

Brend "Volvo" bo'lgan barcha yozuvlarni qaytaring:
SELECT * FROM cars
WHERE brand = 'Volvo';

Yil 1975 dan katta bo'lgan barcha yozuvlarni qaytaring:
SELECT * FROM cars
WHERE year > 1975;

Yil 1975 dan kichik yoki unga teng bo'lgan barcha yozuvlarni qaytaring:
SELECT * FROM cars
WHERE year <= 1975;

Brend "Volvo" EMAS bo'lgan barcha yozuvlarni qaytaring:
SELECT * FROM cars
WHERE brand != 'Volvo';

Ma'lumotlar bazasidan ma'lumotlarni olish uchun biz SELECT bayonotidan foydalanamiz

Ustun nomlarini belgilash orqali biz qaysi ustunlarni tanlashni tanlashimiz mumkin:
Misol
SELECT customer_name, country FROM customers;

Barcha ustunlarni *tanlash uchun ustun nomlari o'rniga a ni belgilang:
Misol
SELECT * FROM customers;

Bayonot SELECT DISTINCT faqat aniq (turli) qiymatlarni qaytarish uchun ishlatiladi.
Jadval ichida ustun ko'pincha takroriy qiymatlarni o'z ichiga oladi va ba'zida siz faqat turli (aniq) qiymatlarni ro'yxatga olishni xohlaysiz.
SELECT DISTINCT country FROM customers;








